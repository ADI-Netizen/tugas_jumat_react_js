{"version":3,"sources":["halaman/FileSatu.js","halaman/FileDua.js","halaman/FileTiga.js","halaman/FileEmpat.js","App.js","serviceWorker.js","index.js"],"names":["FileSatu","props","isi","FileDua","isi2","FileTiga","state","pesanDariState","e","preventDefault","this","setState","href","onClick","ubahDataState","Component","FileEmpat","nama","alamat","nomorTelp","ket","ubahData","React","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wNAQeA,MANf,SAAkBC,GACd,OACI,wEAA8CA,EAAMC,IAApD,sBCIOC,EANC,SAACF,GACb,OACI,iFAAuDA,EAAMG,KAA7D,qB,4BCuBOC,E,kDAxBX,WAAYJ,GAAQ,IAAD,8BACf,cAAMA,IACDK,MAAQ,CACTC,eAAgB,sCAHL,E,0DAQLC,GACVA,EAAEC,iBACFC,KAAKC,SAAS,CAAEJ,eAAgB,4C,+BAG1B,IAAD,OACL,OACI,6BACI,4BAAI,gEACJ,2BAAIG,KAAKJ,MAAMC,gBACf,uBAAGK,KAAK,IAAIC,QAAS,SAACL,GAAD,OAAO,EAAKM,cAAcN,KAA/C,kB,GAnBOO,aC6BRC,E,kDA3BX,WAAYf,GAAQ,IAAD,8BACf,cAAMA,IACDK,MAAQ,CACTW,KAAM,YACNC,OAAQ,WACRC,UAAW,QALA,E,qDASVX,GACLA,EAAEC,iBACFC,KAAKC,SAAS,CAAEO,OAAQ,kC,+BAGlB,IAAD,OACL,OACI,6BACI,4BAAI,qFACJ,4BAAKR,KAAKT,MAAMmB,KAChB,4BAAKV,KAAKJ,MAAMW,MAChB,4BAAKP,KAAKJ,MAAMY,QAChB,uBAAGN,KAAK,IAAIC,QAAS,SAACL,GAAD,OAAO,EAAKa,SAASb,KAA1C,kB,GAvBQc,IAAMP,WCgBfQ,MAXf,WACE,OACE,6BACE,kBAAC,EAAD,CAAUrB,IAAI,qBACd,kBAAC,EAAD,CAASE,KAAK,aACd,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAWgB,IAAI,gBCDDI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.789d239a.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction FileSatu(props) {\r\n    return (\r\n        <h1>Header ini menggunakan props yang isinya {props.isi} dari FileSatu.js</h1>\r\n    );\r\n};\r\n\r\nexport default FileSatu;","import React from 'react';\r\n\r\nconst FileDua = (props) => {\r\n    return (\r\n        <h2>Tulisan Ini juga Menggunakan Props yang berisikan {props.isi2} Dari FileDua.js</h2>\r\n    );\r\n}\r\n\r\nexport default FileDua;","import React, { Component } from 'react';\r\n\r\nclass FileTiga extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            pesanDariState: 'Ini Pesan Dari State Class Model 1',\r\n        }\r\n\r\n    }\r\n\r\n    ubahDataState(e) {\r\n        e.preventDefault();\r\n        this.setState({ pesanDariState: \"Data State Class 1 Berhasil Dirubah !\" })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h2><center>===== Ini FileTiga.js =====</center></h2>\r\n                <p>{this.state.pesanDariState}</p>\r\n                <a href=\"/\" onClick={(e) => this.ubahDataState(e)}>Ubah Data</a>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default FileTiga;","import React from 'react';\r\n\r\nclass FileEmpat extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            nama: 'Adi Fauzi',\r\n            alamat: 'Karawang',\r\n            nomorTelp: 401583\r\n        }\r\n    }\r\n\r\n    ubahData(e) {\r\n        e.preventDefault();\r\n        this.setState({ alamat: 'Jatisari Kabupaten Karawang' })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h2><center>=============== Ini FileEmpat.js ===============</center></h2>\r\n                <h3>{this.props.ket}</h3>\r\n                <h3>{this.state.nama}</h3>\r\n                <h3>{this.state.alamat}</h3>\r\n                <a href=\"/\" onClick={(e) => this.ubahData(e)}>Ubah Data</a>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default FileEmpat;","import React from 'react';\nimport './App.css';\nimport FileSatu from './halaman/FileSatu'\nimport FileDua from './halaman/FileDua'\nimport FileTiga from './halaman/FileTiga'\nimport FileEmpat from './halaman/FileEmpat'\n\nfunction App() {\n  return (\n    <div>\n      <FileSatu isi=\"Assalamu'alaykum\" />\n      <FileDua isi2=\"Bonjour!\" />\n      <FileTiga />\n      <FileEmpat ket=\"Data Diri\" />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}